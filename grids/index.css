.grid-container > div {
    height: 100px;
    background-color: rgb(247, 102, 102);
    border: 1px solid black;
    box-shadow: 10px 10px 8px 10px #888888;
  }
  /*when second div hover*/
  .float-container > div > div:hover {
    background-color: rgb(51, 70, 236);
    /*similar to animation - scale mean zoom */
    transform: rotate(15deg) scale(1.1) translateX(-15px);
  }
  .float-container > div {
    width: 25%;
    float: left;
    box-sizing: border-box;
  }
  
  .float-container > div > div {
    height: 100px;
    margin: 50px;
    background-color: rgb(247, 102, 102);
    border: 1px solid black;
    box-shadow: 10px 10px 8px 10px #888888;
    /*similar to animation */
    transition: 0.3s ease-out;
    /* transition-delay: 1s; */
  }
  
  .float-container > .double {
    width: 50%;
  }
  
  .float-container::after {
    content: "";
    display: block;
    clear: both;
  }
  .grid-container {
    /*when the display grid we have to specify how many rows and columns*/
    display: grid;
    /*3 column - elly flmiddle (2fr:means '63f el other columns by 2)*/
    grid-template-columns: 1fr 2fr 1fr;
    row-gap: 20px;
    column-gap: 10px;
    /*if i type only gap automatically it will arrange the gap between  rows and columns*/
    gap: 50px;

    /*if i want the specify start and end column i can use
    grid-column: 1 / 3;  << hatha y3ny start from 1 and end tell 3
    and it is the same for the rows (grid-row: 1 / 3;)*/
  }
  /*responsive design for float/grid layout*/
  @media only screen and (max-width: 600px) {
    .float-container > div {
      width: 50%;
    }
    .float-container > .double {
      width: 50%;
    }
  /*responsive design for grid layout -- y3ny etha elscreen become
  smaller allign 2 column enstead of 3 columns*/
    .grid-container {
      grid-template-columns: 1fr 1fr;
    }
  }